{"version":3,"file":"abTesting-prl7XN1G.js","sources":["../../node_modules/uuid/dist/stringify.js","../../node_modules/uuid/dist/rng.js","../../node_modules/uuid/dist/native.js","../../node_modules/uuid/dist/v4.js","../../src/utils/abTesting.ts"],"sourcesContent":["import validate from './validate.js';\nconst byteToHex = [];\nfor (let i = 0; i < 256; ++i) {\n    byteToHex.push((i + 0x100).toString(16).slice(1));\n}\nexport function unsafeStringify(arr, offset = 0) {\n    return (byteToHex[arr[offset + 0]] +\n        byteToHex[arr[offset + 1]] +\n        byteToHex[arr[offset + 2]] +\n        byteToHex[arr[offset + 3]] +\n        '-' +\n        byteToHex[arr[offset + 4]] +\n        byteToHex[arr[offset + 5]] +\n        '-' +\n        byteToHex[arr[offset + 6]] +\n        byteToHex[arr[offset + 7]] +\n        '-' +\n        byteToHex[arr[offset + 8]] +\n        byteToHex[arr[offset + 9]] +\n        '-' +\n        byteToHex[arr[offset + 10]] +\n        byteToHex[arr[offset + 11]] +\n        byteToHex[arr[offset + 12]] +\n        byteToHex[arr[offset + 13]] +\n        byteToHex[arr[offset + 14]] +\n        byteToHex[arr[offset + 15]]).toLowerCase();\n}\nfunction stringify(arr, offset = 0) {\n    const uuid = unsafeStringify(arr, offset);\n    if (!validate(uuid)) {\n        throw TypeError('Stringified UUID is invalid');\n    }\n    return uuid;\n}\nexport default stringify;\n","let getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n    if (!getRandomValues) {\n        if (typeof crypto === 'undefined' || !crypto.getRandomValues) {\n            throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n        }\n        getRandomValues = crypto.getRandomValues.bind(crypto);\n    }\n    return getRandomValues(rnds8);\n}\n","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default { randomUUID };\n","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\nfunction _v4(options, buf, offset) {\n    options = options || {};\n    const rnds = options.random ?? options.rng?.() ?? rng();\n    if (rnds.length < 16) {\n        throw new Error('Random bytes length must be >= 16');\n    }\n    rnds[6] = (rnds[6] & 0x0f) | 0x40;\n    rnds[8] = (rnds[8] & 0x3f) | 0x80;\n    if (buf) {\n        offset = offset || 0;\n        if (offset < 0 || offset + 16 > buf.length) {\n            throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);\n        }\n        for (let i = 0; i < 16; ++i) {\n            buf[offset + i] = rnds[i];\n        }\n        return buf;\n    }\n    return unsafeStringify(rnds);\n}\nfunction v4(options, buf, offset) {\n    if (native.randomUUID && !buf && !options) {\n        return native.randomUUID();\n    }\n    return _v4(options, buf, offset);\n}\nexport default v4;\n","/**\r\n * A/B Testing Framework for Conversion Optimization\r\n * \r\n * This framework allows you to:\r\n * - Create multiple variations of components\r\n * - Track user interactions and conversions\r\n * - Analyze which variations perform better\r\n * - Make data-driven decisions to optimize conversions\r\n */\r\n\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nexport interface ABTest {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  status: 'active' | 'paused' | 'completed';\r\n  startDate: Date;\r\n  endDate?: Date;\r\n  variations: ABVariation[];\r\n  targetAudience?: string;\r\n  trafficAllocation: number; // 0-100 percentage\r\n  successMetric: string;\r\n  minimumSampleSize: number;\r\n}\r\n\r\nexport interface ABVariation {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  trafficAllocation: number; // 0-100 percentage\r\n  component: React.ComponentType<any>;\r\n  props?: any;\r\n  isControl?: boolean;\r\n}\r\n\r\nexport interface ABTestResult {\r\n  testId: string;\r\n  variationId: string;\r\n  userId: string;\r\n  sessionId: string;\r\n  timestamp: Date;\r\n  event: 'view' | 'click' | 'conversion' | 'bounce';\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\nexport interface ABTestAnalytics {\r\n  testId: string;\r\n  totalViews: number;\r\n  totalClicks: number;\r\n  totalConversions: number;\r\n  conversionRate: number;\r\n  clickThroughRate: number;\r\n  bounceRate: number;\r\n  variations: {\r\n    [variationId: string]: {\r\n      views: number;\r\n      clicks: number;\r\n      conversions: number;\r\n      conversionRate: number;\r\n      clickThroughRate: number;\r\n      bounceRate: number;\r\n    };\r\n  };\r\n}\r\n\r\nclass ABTestingFramework {\r\n  private tests: Map<string, ABTest> = new Map();\r\n  private results: ABTestResult[] = [];\r\n  private userId: string;\r\n  private sessionId: string;\r\n\r\n  constructor() {\r\n    this.userId = this.getOrCreateUserId();\r\n    this.sessionId = this.getOrCreateSessionId();\r\n  }\r\n\r\n  private getOrCreateUserId(): string {\r\n    let userId = localStorage.getItem('ab-testing-user-id');\r\n    if (!userId) {\r\n      userId = uuidv4();\r\n      localStorage.setItem('ab-testing-user-id', userId);\r\n    }\r\n    return userId;\r\n  }\r\n\r\n  private getOrCreateSessionId(): string {\r\n    let sessionId = sessionStorage.getItem('ab-testing-session-id');\r\n    if (!sessionId) {\r\n      sessionId = uuidv4();\r\n      sessionStorage.setItem('ab-testing-session-id', sessionId);\r\n    }\r\n    return sessionId;\r\n  }\r\n\r\n  /**\r\n   * Create a new A/B test\r\n   */\r\n  createTest(test: Omit<ABTest, 'id'>): string {\r\n    const testId = uuidv4();\r\n    const newTest: ABTest = {\r\n      ...test,\r\n      id: testId,\r\n    };\r\n    this.tests.set(testId, newTest);\r\n    this.saveTestsToStorage();\r\n    return testId;\r\n  }\r\n\r\n  /**\r\n   * Get active A/B test for a specific test name\r\n   */\r\n  getActiveTest(testName: string): ABTest | null {\r\n    for (const test of this.tests.values()) {\r\n      if (test.name === testName && test.status === 'active') {\r\n        return test;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Get user's assigned variation for a test\r\n   */\r\n  getAssignedVariation(testId: string): ABVariation | null {\r\n    const test = this.tests.get(testId);\r\n    if (!test || test.status !== 'active') {\r\n      return null;\r\n    }\r\n\r\n    // Check if user is already assigned to a variation\r\n    const assignmentKey = `ab-test-assignment-${testId}`;\r\n    const existingAssignment = localStorage.getItem(assignmentKey);\r\n    \r\n    if (existingAssignment) {\r\n      const variation = test.variations.find(v => v.id === existingAssignment);\r\n      if (variation) {\r\n        return variation;\r\n      }\r\n    }\r\n\r\n    // Assign user to a variation based on traffic allocation\r\n    const random = Math.random() * 100;\r\n    let cumulativeAllocation = 0;\r\n\r\n    for (const variation of test.variations) {\r\n      cumulativeAllocation += variation.trafficAllocation;\r\n      if (random <= cumulativeAllocation) {\r\n        localStorage.setItem(assignmentKey, variation.id);\r\n        return variation;\r\n      }\r\n    }\r\n\r\n    // Fallback to control variation\r\n    const controlVariation = test.variations.find(v => v.isControl);\r\n    if (controlVariation) {\r\n      localStorage.setItem(assignmentKey, controlVariation.id);\r\n      return controlVariation;\r\n    }\r\n\r\n    return test.variations[0];\r\n  }\r\n\r\n  /**\r\n   * Track an event for A/B testing\r\n   */\r\n  trackEvent(testId: string, variationId: string, event: ABTestResult['event'], metadata?: Record<string, any>): void {\r\n    const result: ABTestResult = {\r\n      testId,\r\n      variationId,\r\n      userId: this.userId,\r\n      sessionId: this.sessionId,\r\n      timestamp: new Date(),\r\n      event,\r\n      metadata,\r\n    };\r\n\r\n    this.results.push(result);\r\n    this.saveResultsToStorage();\r\n\r\n    // Send to analytics\r\n    this.sendToAnalytics(result);\r\n  }\r\n\r\n  /**\r\n   * Get analytics for a specific test\r\n   */\r\n  getTestAnalytics(testId: string): ABTestAnalytics | null {\r\n    const test = this.tests.get(testId);\r\n    if (!test) return null;\r\n\r\n    const testResults = this.results.filter(r => r.testId === testId);\r\n    const totalViews = testResults.filter(r => r.event === 'view').length;\r\n    const totalClicks = testResults.filter(r => r.event === 'click').length;\r\n    const totalConversions = testResults.filter(r => r.event === 'conversion').length;\r\n    const totalBounces = testResults.filter(r => r.event === 'bounce').length;\r\n\r\n    const analytics: ABTestAnalytics = {\r\n      testId,\r\n      totalViews,\r\n      totalClicks,\r\n      totalConversions,\r\n      conversionRate: totalViews > 0 ? (totalConversions / totalViews) * 100 : 0,\r\n      clickThroughRate: totalViews > 0 ? (totalClicks / totalViews) * 100 : 0,\r\n      bounceRate: totalViews > 0 ? (totalBounces / totalViews) * 100 : 0,\r\n      variations: {},\r\n    };\r\n\r\n    // Calculate analytics for each variation\r\n    for (const variation of test.variations) {\r\n      const variationResults = testResults.filter(r => r.variationId === variation.id);\r\n      const variationViews = variationResults.filter(r => r.event === 'view').length;\r\n      const variationClicks = variationResults.filter(r => r.event === 'click').length;\r\n      const variationConversions = variationResults.filter(r => r.event === 'conversion').length;\r\n      const variationBounces = variationResults.filter(r => r.event === 'bounce').length;\r\n\r\n      analytics.variations[variation.id] = {\r\n        views: variationViews,\r\n        clicks: variationClicks,\r\n        conversions: variationConversions,\r\n        conversionRate: variationViews > 0 ? (variationConversions / variationViews) * 100 : 0,\r\n        clickThroughRate: variationViews > 0 ? (variationClicks / variationViews) * 100 : 0,\r\n        bounceRate: variationViews > 0 ? (variationBounces / variationViews) * 100 : 0,\r\n      };\r\n    }\r\n\r\n    return analytics;\r\n  }\r\n\r\n  /**\r\n   * Get all active tests\r\n   */\r\n  getActiveTests(): ABTest[] {\r\n    return Array.from(this.tests.values()).filter(test => test.status === 'active');\r\n  }\r\n\r\n  /**\r\n   * Pause a test\r\n   */\r\n  pauseTest(testId: string): void {\r\n    const test = this.tests.get(testId);\r\n    if (test) {\r\n      test.status = 'paused';\r\n      this.saveTestsToStorage();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Complete a test\r\n   */\r\n  completeTest(testId: string): void {\r\n    const test = this.tests.get(testId);\r\n    if (test) {\r\n      test.status = 'completed';\r\n      test.endDate = new Date();\r\n      this.saveTestsToStorage();\r\n    }\r\n  }\r\n\r\n  private saveTestsToStorage(): void {\r\n    const testsArray = Array.from(this.tests.values());\r\n    localStorage.setItem('ab-testing-tests', JSON.stringify(testsArray));\r\n  }\r\n\r\n  private saveResultsToStorage(): void {\r\n    localStorage.setItem('ab-testing-results', JSON.stringify(this.results));\r\n  }\r\n\r\n  private sendToAnalytics(result: ABTestResult): void {\r\n    // Send to Google Analytics or other analytics service\r\n    if (typeof window !== 'undefined' && (window as any).gtag) {\r\n      (window as any).gtag('event', 'ab_test_event', {\r\n        test_id: result.testId,\r\n        variation_id: result.variationId,\r\n        event_type: result.event,\r\n        user_id: result.userId,\r\n        session_id: result.sessionId,\r\n        metadata: result.metadata,\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load tests from storage\r\n   */\r\n  loadTestsFromStorage(): void {\r\n    const stored = localStorage.getItem('ab-testing-tests');\r\n    if (stored) {\r\n      try {\r\n        const testsArray = JSON.parse(stored);\r\n        this.tests.clear();\r\n        for (const test of testsArray) {\r\n          this.tests.set(test.id, test);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error loading A/B tests from storage:', error);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load results from storage\r\n   */\r\n  loadResultsFromStorage(): void {\r\n    const stored = localStorage.getItem('ab-testing-results');\r\n    if (stored) {\r\n      try {\r\n        this.results = JSON.parse(stored);\r\n      } catch (error) {\r\n        console.error('Error loading A/B test results from storage:', error);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Create singleton instance\r\nexport const abTesting = new ABTestingFramework();\r\n\r\n// Load data from storage on initialization\r\nabTesting.loadTestsFromStorage();\r\nabTesting.loadResultsFromStorage();\r\n"],"names":["byteToHex","i","unsafeStringify","arr","offset","getRandomValues","rnds8","rng","randomUUID","native","_v4","options","buf","_a","rnds","v4","ABTestingFramework","userId","uuidv4","sessionId","test","testId","newTest","testName","assignmentKey","existingAssignment","variation","v","random","cumulativeAllocation","controlVariation","variationId","event","metadata","result","testResults","totalViews","totalClicks","totalConversions","totalBounces","analytics","variationResults","r","variationViews","variationClicks","variationConversions","variationBounces","testsArray","stored","error","abTesting"],"mappings":"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","x_google_ignoreList":[0,1,2,3]}