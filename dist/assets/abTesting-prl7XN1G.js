const o=[];for(let s=0;s<256;++s)o.push((s+256).toString(16).slice(1));function w(s,t=0){return(o[s[t+0]]+o[s[t+1]]+o[s[t+2]]+o[s[t+3]]+"-"+o[s[t+4]]+o[s[t+5]]+"-"+o[s[t+6]]+o[s[t+7]]+"-"+o[s[t+8]]+o[s[t+9]]+"-"+o[s[t+10]]+o[s[t+11]]+o[s[t+12]]+o[s[t+13]]+o[s[t+14]]+o[s[t+15]]).toLowerCase()}let h;const b=new Uint8Array(16);function p(){if(!h){if(typeof crypto>"u"||!crypto.getRandomValues)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");h=crypto.getRandomValues.bind(crypto)}return h(b)}const A=typeof crypto<"u"&&crypto.randomUUID&&crypto.randomUUID.bind(crypto),y={randomUUID:A};function R(s,t,e){var i;s=s||{};const n=s.random??((i=s.rng)==null?void 0:i.call(s))??p();if(n.length<16)throw new Error("Random bytes length must be >= 16");return n[6]=n[6]&15|64,n[8]=n[8]&63|128,w(n)}function m(s,t,e){return y.randomUUID&&!t&&!s?y.randomUUID():R(s)}class U{constructor(){this.tests=new Map,this.results=[],this.userId=this.getOrCreateUserId(),this.sessionId=this.getOrCreateSessionId()}getOrCreateUserId(){let t=localStorage.getItem("ab-testing-user-id");return t||(t=m(),localStorage.setItem("ab-testing-user-id",t)),t}getOrCreateSessionId(){let t=sessionStorage.getItem("ab-testing-session-id");return t||(t=m(),sessionStorage.setItem("ab-testing-session-id",t)),t}createTest(t){const e=m(),n={...t,id:e};return this.tests.set(e,n),this.saveTestsToStorage(),e}getActiveTest(t){for(const e of this.tests.values())if(e.name===t&&e.status==="active")return e;return null}getAssignedVariation(t){const e=this.tests.get(t);if(!e||e.status!=="active")return null;const n=`ab-test-assignment-${t}`,i=localStorage.getItem(n);if(i){const a=e.variations.find(r=>r.id===i);if(a)return a}const l=Math.random()*100;let u=0;for(const a of e.variations)if(u+=a.trafficAllocation,l<=u)return localStorage.setItem(n,a.id),a;const d=e.variations.find(a=>a.isControl);return d?(localStorage.setItem(n,d.id),d):e.variations[0]}trackEvent(t,e,n,i){const l={testId:t,variationId:e,userId:this.userId,sessionId:this.sessionId,timestamp:new Date,event:n,metadata:i};this.results.push(l),this.saveResultsToStorage(),this.sendToAnalytics(l)}getTestAnalytics(t){const e=this.tests.get(t);if(!e)return null;const n=this.results.filter(r=>r.testId===t),i=n.filter(r=>r.event==="view").length,l=n.filter(r=>r.event==="click").length,u=n.filter(r=>r.event==="conversion").length,d=n.filter(r=>r.event==="bounce").length,a={testId:t,totalViews:i,totalClicks:l,totalConversions:u,conversionRate:i>0?u/i*100:0,clickThroughRate:i>0?l/i*100:0,bounceRate:i>0?d/i*100:0,variations:{}};for(const r of e.variations){const v=n.filter(c=>c.variationId===r.id),g=v.filter(c=>c.event==="view").length,f=v.filter(c=>c.event==="click").length,I=v.filter(c=>c.event==="conversion").length,T=v.filter(c=>c.event==="bounce").length;a.variations[r.id]={views:g,clicks:f,conversions:I,conversionRate:g>0?I/g*100:0,clickThroughRate:g>0?f/g*100:0,bounceRate:g>0?T/g*100:0}}return a}getActiveTests(){return Array.from(this.tests.values()).filter(t=>t.status==="active")}pauseTest(t){const e=this.tests.get(t);e&&(e.status="paused",this.saveTestsToStorage())}completeTest(t){const e=this.tests.get(t);e&&(e.status="completed",e.endDate=new Date,this.saveTestsToStorage())}saveTestsToStorage(){const t=Array.from(this.tests.values());localStorage.setItem("ab-testing-tests",JSON.stringify(t))}saveResultsToStorage(){localStorage.setItem("ab-testing-results",JSON.stringify(this.results))}sendToAnalytics(t){typeof window<"u"&&window.gtag&&window.gtag("event","ab_test_event",{test_id:t.testId,variation_id:t.variationId,event_type:t.event,user_id:t.userId,session_id:t.sessionId,metadata:t.metadata})}loadTestsFromStorage(){const t=localStorage.getItem("ab-testing-tests");if(t)try{const e=JSON.parse(t);this.tests.clear();for(const n of e)this.tests.set(n.id,n)}catch(e){console.error("Error loading A/B tests from storage:",e)}}loadResultsFromStorage(){const t=localStorage.getItem("ab-testing-results");if(t)try{this.results=JSON.parse(t)}catch(e){console.error("Error loading A/B test results from storage:",e)}}}const S=new U;S.loadTestsFromStorage();S.loadResultsFromStorage();export{S as a};
//# sourceMappingURL=abTesting-prl7XN1G.js.map
