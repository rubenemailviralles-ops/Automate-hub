{"version":3,"file":"FAQSchema-Yc3UjFHd.js","sources":["../../src/components/ServiceSchema.tsx","../../src/components/FAQSchema.tsx"],"sourcesContent":["import { useEffect } from 'react';\r\n\r\ninterface ServiceSchemaProps {\r\n  serviceName: string;\r\n  description: string;\r\n  serviceType: string;\r\n  areaServed?: string;\r\n  provider?: {\r\n    name: string;\r\n    url: string;\r\n  };\r\n  offers?: {\r\n    name: string;\r\n    description: string;\r\n  }[];\r\n}\r\n\r\nconst ServiceSchema = ({\r\n  serviceName,\r\n  description,\r\n  serviceType,\r\n  areaServed = 'Worldwide',\r\n  provider = {\r\n    name: 'Automate Hub',\r\n    url: 'https://automate-hub.com',\r\n  },\r\n  offers = [],\r\n}: ServiceSchemaProps) => {\r\n  useEffect(() => {\r\n    const structuredData = {\r\n      '@context': 'https://schema.org',\r\n      '@type': 'Service',\r\n      'name': serviceName,\r\n      'description': description,\r\n      'serviceType': serviceType,\r\n      'provider': {\r\n        '@type': 'Organization',\r\n        'name': provider.name,\r\n        'url': provider.url,\r\n        'logo': 'https://automate-hub.com/automate-hub-ai-platform-preview.png',\r\n        'email': 'automate.hub1@gmail.com',\r\n        'contactPoint': {\r\n          '@type': 'ContactPoint',\r\n          'email': 'automate.hub1@gmail.com',\r\n          'contactType': 'customer service',\r\n          'areaServed': areaServed,\r\n          'availableLanguage': ['English'],\r\n        },\r\n      },\r\n      'areaServed': {\r\n        '@type': 'GeoShape',\r\n        'name': areaServed,\r\n      },\r\n      'hasOfferCatalog': {\r\n        '@type': 'OfferCatalog',\r\n        'name': `${serviceName} Features`,\r\n        'itemListElement': offers.map((offer, index) => ({\r\n          '@type': 'Offer',\r\n          'itemOffered': {\r\n            '@type': 'Service',\r\n            'name': offer.name,\r\n            'description': offer.description,\r\n          },\r\n        })),\r\n      },\r\n      'aggregateRating': {\r\n        '@type': 'AggregateRating',\r\n        'ratingValue': '4.9',\r\n        'reviewCount': '87',\r\n      },\r\n    };\r\n\r\n    // Add or update service structured data\r\n    let script = document.getElementById('service-schema') as HTMLScriptElement;\r\n    if (!script) {\r\n      script = document.createElement('script');\r\n      script.id = 'service-schema';\r\n      script.type = 'application/ld+json';\r\n      document.head.appendChild(script);\r\n    }\r\n    script.textContent = JSON.stringify(structuredData);\r\n\r\n    return () => {\r\n      // Clean up on unmount\r\n      const existingScript = document.getElementById('service-schema');\r\n      if (existingScript) {\r\n        existingScript.remove();\r\n      }\r\n    };\r\n  }, [serviceName, description, serviceType, areaServed, provider, offers]);\r\n\r\n  return null;\r\n};\r\n\r\nexport default ServiceSchema;\r\n\r\n","import { useEffect } from 'react';\r\n\r\ninterface FAQItem {\r\n  question: string;\r\n  answer: string;\r\n}\r\n\r\ninterface FAQSchemaProps {\r\n  faqs: FAQItem[];\r\n}\r\n\r\nconst FAQSchema = ({ faqs }: FAQSchemaProps) => {\r\n  useEffect(() => {\r\n    const structuredData = {\r\n      '@context': 'https://schema.org',\r\n      '@type': 'FAQPage',\r\n      'mainEntity': faqs.map((faq) => ({\r\n        '@type': 'Question',\r\n        'name': faq.question,\r\n        'acceptedAnswer': {\r\n          '@type': 'Answer',\r\n          'text': faq.answer,\r\n        },\r\n      })),\r\n    };\r\n\r\n    // Add or update FAQ structured data\r\n    let script = document.getElementById('faq-schema') as HTMLScriptElement;\r\n    if (!script) {\r\n      script = document.createElement('script');\r\n      script.id = 'faq-schema';\r\n      script.type = 'application/ld+json';\r\n      document.head.appendChild(script);\r\n    }\r\n    script.textContent = JSON.stringify(structuredData);\r\n\r\n    return () => {\r\n      // Clean up on unmount\r\n      const existingScript = document.getElementById('faq-schema');\r\n      if (existingScript) {\r\n        existingScript.remove();\r\n      }\r\n    };\r\n  }, [faqs]);\r\n\r\n  return null;\r\n};\r\n\r\nexport default FAQSchema;\r\n\r\n"],"names":["ServiceSchema","serviceName","description","serviceType","areaServed","provider","offers","useEffect","structuredData","offer","index","script","existingScript","FAQSchema","faqs","faq"],"mappings":"0CAiBA,MAAMA,EAAgB,CAAC,CACrB,YAAAC,EACA,YAAAC,EACA,YAAAC,EACA,WAAAC,EAAa,YACb,SAAAC,EAAW,CACT,KAAM,eACN,IAAK,0BACP,EACA,OAAAC,EAAS,CAAC,CACZ,KACEC,EAAAA,UAAU,IAAM,CACd,MAAMC,EAAiB,CACrB,WAAY,qBACZ,QAAS,UACT,KAAQP,EACR,YAAeC,EACf,YAAeC,EACf,SAAY,CACV,QAAS,eACT,KAAQE,EAAS,KACjB,IAAOA,EAAS,IAChB,KAAQ,gEACR,MAAS,0BACT,aAAgB,CACd,QAAS,eACT,MAAS,0BACT,YAAe,mBACf,WAAcD,EACd,kBAAqB,CAAC,SAAS,CACjC,CACF,EACA,WAAc,CACZ,QAAS,WACT,KAAQA,CACV,EACA,gBAAmB,CACjB,QAAS,eACT,KAAQ,GAAGH,CAAW,YACtB,gBAAmBK,EAAO,IAAI,CAACG,EAAOC,KAAW,CAC/C,QAAS,QACT,YAAe,CACb,QAAS,UACT,KAAQD,EAAM,KACd,YAAeA,EAAM,WACvB,CAAA,EACA,CACJ,EACA,gBAAmB,CACjB,QAAS,kBACT,YAAe,MACf,YAAe,IACjB,CAAA,EAIE,IAAAE,EAAS,SAAS,eAAe,gBAAgB,EACrD,OAAKA,IACMA,EAAA,SAAS,cAAc,QAAQ,EACxCA,EAAO,GAAK,iBACZA,EAAO,KAAO,sBACL,SAAA,KAAK,YAAYA,CAAM,GAE3BA,EAAA,YAAc,KAAK,UAAUH,CAAc,EAE3C,IAAM,CAEL,MAAAI,EAAiB,SAAS,eAAe,gBAAgB,EAC3DA,GACFA,EAAe,OAAO,CACxB,CACF,EACC,CAACX,EAAaC,EAAaC,EAAaC,EAAYC,EAAUC,CAAM,CAAC,EAEjE,MChFHO,EAAY,CAAC,CAAE,KAAAC,MACnBP,EAAAA,UAAU,IAAM,CACd,MAAMC,EAAiB,CACrB,WAAY,qBACZ,QAAS,UACT,WAAcM,EAAK,IAAKC,IAAS,CAC/B,QAAS,WACT,KAAQA,EAAI,SACZ,eAAkB,CAChB,QAAS,SACT,KAAQA,EAAI,MACd,CAAA,EACA,CAAA,EAIA,IAAAJ,EAAS,SAAS,eAAe,YAAY,EACjD,OAAKA,IACMA,EAAA,SAAS,cAAc,QAAQ,EACxCA,EAAO,GAAK,aACZA,EAAO,KAAO,sBACL,SAAA,KAAK,YAAYA,CAAM,GAE3BA,EAAA,YAAc,KAAK,UAAUH,CAAc,EAE3C,IAAM,CAEL,MAAAI,EAAiB,SAAS,eAAe,YAAY,EACvDA,GACFA,EAAe,OAAO,CACxB,CACF,EACC,CAACE,CAAI,CAAC,EAEF"}